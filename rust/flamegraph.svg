<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="3938"><g><title>perf-exec (5 samples, 0.13%)</title><rect x="0.0000%" y="357" width="0.1270%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="367.50"></text></g><g><title>[unknown] (5 samples, 0.13%)</title><rect x="0.0000%" y="341" width="0.1270%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="351.50"></text></g><g><title>[unknown] (5 samples, 0.13%)</title><rect x="0.0000%" y="325" width="0.1270%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="5"/><text x="0.2500%" y="335.50"></text></g><g><title>[unknown] (5 samples, 0.13%)</title><rect x="0.0000%" y="309" width="0.1270%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="5"/><text x="0.2500%" y="319.50"></text></g><g><title>[unknown] (5 samples, 0.13%)</title><rect x="0.0000%" y="293" width="0.1270%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="303.50"></text></g><g><title>[unknown] (5 samples, 0.13%)</title><rect x="0.0000%" y="277" width="0.1270%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="5"/><text x="0.2500%" y="287.50"></text></g><g><title>[unknown] (5 samples, 0.13%)</title><rect x="0.0000%" y="261" width="0.1270%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="5"/><text x="0.2500%" y="271.50"></text></g><g><title>[unknown] (5 samples, 0.13%)</title><rect x="0.0000%" y="245" width="0.1270%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="5"/><text x="0.2500%" y="255.50"></text></g><g><title>[unknown] (5 samples, 0.13%)</title><rect x="0.0000%" y="229" width="0.1270%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="5"/><text x="0.2500%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.13%)</title><rect x="0.0000%" y="213" width="0.1270%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="5"/><text x="0.2500%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.13%)</title><rect x="0.0000%" y="197" width="0.1270%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="5"/><text x="0.2500%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.13%)</title><rect x="0.0000%" y="181" width="0.1270%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="5"/><text x="0.2500%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.13%)</title><rect x="0.0000%" y="165" width="0.1270%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="5"/><text x="0.2500%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.13%)</title><rect x="0.0000%" y="149" width="0.1270%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="5"/><text x="0.2500%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.13%)</title><rect x="0.0000%" y="133" width="0.1270%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="5"/><text x="0.2500%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.13%)</title><rect x="0.0000%" y="117" width="0.1270%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="5"/><text x="0.2500%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.1270%" y="325" width="0.0254%" height="15" fill="rgb(225,20,46)" fg:x="5" fg:w="1"/><text x="0.3770%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.1270%" y="309" width="0.0254%" height="15" fill="rgb(210,31,41)" fg:x="5" fg:w="1"/><text x="0.3770%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.1270%" y="293" width="0.0254%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="1"/><text x="0.3770%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.1270%" y="277" width="0.0254%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="1"/><text x="0.3770%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.1270%" y="261" width="0.0254%" height="15" fill="rgb(249,33,26)" fg:x="5" fg:w="1"/><text x="0.3770%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.1270%" y="245" width="0.0254%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="1"/><text x="0.3770%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.1270%" y="229" width="0.0254%" height="15" fill="rgb(221,5,38)" fg:x="5" fg:w="1"/><text x="0.3770%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.1270%" y="213" width="0.0254%" height="15" fill="rgb(247,18,42)" fg:x="5" fg:w="1"/><text x="0.3770%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.1270%" y="197" width="0.0254%" height="15" fill="rgb(241,131,45)" fg:x="5" fg:w="1"/><text x="0.3770%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.1270%" y="181" width="0.0254%" height="15" fill="rgb(249,31,29)" fg:x="5" fg:w="1"/><text x="0.3770%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.1270%" y="165" width="0.0254%" height="15" fill="rgb(225,111,53)" fg:x="5" fg:w="1"/><text x="0.3770%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.1270%" y="149" width="0.0254%" height="15" fill="rgb(238,160,17)" fg:x="5" fg:w="1"/><text x="0.3770%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.1270%" y="133" width="0.0254%" height="15" fill="rgb(214,148,48)" fg:x="5" fg:w="1"/><text x="0.3770%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.1270%" y="117" width="0.0254%" height="15" fill="rgb(232,36,49)" fg:x="5" fg:w="1"/><text x="0.3770%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.1270%" y="101" width="0.0254%" height="15" fill="rgb(209,103,24)" fg:x="5" fg:w="1"/><text x="0.3770%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.1270%" y="85" width="0.0254%" height="15" fill="rgb(229,88,8)" fg:x="5" fg:w="1"/><text x="0.3770%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.1270%" y="69" width="0.0254%" height="15" fill="rgb(213,181,19)" fg:x="5" fg:w="1"/><text x="0.3770%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.1270%" y="53" width="0.0254%" height="15" fill="rgb(254,191,54)" fg:x="5" fg:w="1"/><text x="0.3770%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="0.1270%" y="37" width="0.0254%" height="15" fill="rgb(241,83,37)" fg:x="5" fg:w="1"/><text x="0.3770%" y="47.50"></text></g><g><title>__fma_fma3 (94 samples, 2.39%)</title><rect x="0.1524%" y="325" width="2.3870%" height="15" fill="rgb(233,36,39)" fg:x="6" fg:w="94"/><text x="0.4024%" y="335.50">__..</text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.15%)</title><rect x="2.5901%" y="309" width="0.1524%" height="15" fill="rgb(226,3,54)" fg:x="102" fg:w="6"/><text x="2.8401%" y="319.50"></text></g><g><title>core::slice::iter::IterMut&lt;T&gt;::post_inc_start (1 samples, 0.03%)</title><rect x="2.7171%" y="293" width="0.0254%" height="15" fill="rgb(245,192,40)" fg:x="107" fg:w="1"/><text x="2.9671%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.03%)</title><rect x="2.7171%" y="277" width="0.0254%" height="15" fill="rgb(238,167,29)" fg:x="107" fg:w="1"/><text x="2.9671%" y="287.50"></text></g><g><title>vec_array_perf_rust::fill_buffer (5 samples, 0.13%)</title><rect x="2.7425%" y="309" width="0.1270%" height="15" fill="rgb(232,182,51)" fg:x="108" fg:w="5"/><text x="2.9925%" y="319.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="2.8441%" y="293" width="0.0254%" height="15" fill="rgb(231,60,39)" fg:x="112" fg:w="1"/><text x="3.0941%" y="303.50"></text></g><g><title>vec_array_perf_rust::fill_buffer_256 (2 samples, 0.05%)</title><rect x="2.8695%" y="309" width="0.0508%" height="15" fill="rgb(208,69,12)" fg:x="113" fg:w="2"/><text x="3.1195%" y="319.50"></text></g><g><title>vec_array_perf_rust::fill_buffer_512 (1 samples, 0.03%)</title><rect x="2.9203%" y="309" width="0.0254%" height="15" fill="rgb(235,93,37)" fg:x="115" fg:w="1"/><text x="3.1703%" y="319.50"></text></g><g><title>vec_array_perf_rust::fill_buffer_8 (1 samples, 0.03%)</title><rect x="2.9457%" y="309" width="0.0254%" height="15" fill="rgb(213,116,39)" fg:x="116" fg:w="1"/><text x="3.1957%" y="319.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (224 samples, 5.69%)</title><rect x="49.8730%" y="293" width="5.6882%" height="15" fill="rgb(222,207,29)" fg:x="1964" fg:w="224"/><text x="50.1230%" y="303.50">&lt;core::..</text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="55.5358%" y="277" width="0.0254%" height="15" fill="rgb(206,96,30)" fg:x="2187" fg:w="1"/><text x="55.7858%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="55.5358%" y="261" width="0.0254%" height="15" fill="rgb(218,138,4)" fg:x="2187" fg:w="1"/><text x="55.7858%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="55.5358%" y="245" width="0.0254%" height="15" fill="rgb(250,191,14)" fg:x="2187" fg:w="1"/><text x="55.7858%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="55.5358%" y="229" width="0.0254%" height="15" fill="rgb(239,60,40)" fg:x="2187" fg:w="1"/><text x="55.7858%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="55.5358%" y="213" width="0.0254%" height="15" fill="rgb(206,27,48)" fg:x="2187" fg:w="1"/><text x="55.7858%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="55.5358%" y="197" width="0.0254%" height="15" fill="rgb(225,35,8)" fg:x="2187" fg:w="1"/><text x="55.7858%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="55.5358%" y="181" width="0.0254%" height="15" fill="rgb(250,213,24)" fg:x="2187" fg:w="1"/><text x="55.7858%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="55.5358%" y="165" width="0.0254%" height="15" fill="rgb(247,123,22)" fg:x="2187" fg:w="1"/><text x="55.7858%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="55.5358%" y="149" width="0.0254%" height="15" fill="rgb(231,138,38)" fg:x="2187" fg:w="1"/><text x="55.7858%" y="159.50"></text></g><g><title>vec_array_perf_rust::iir (2,597 samples, 65.95%)</title><rect x="2.9711%" y="309" width="65.9472%" height="15" fill="rgb(231,145,46)" fg:x="117" fg:w="2597"/><text x="3.2211%" y="319.50">vec_array_perf_rust::iir</text></g><g><title>std::f64::&lt;impl f64&gt;::mul_add (526 samples, 13.36%)</title><rect x="55.5612%" y="293" width="13.3570%" height="15" fill="rgb(251,118,11)" fg:x="2188" fg:w="526"/><text x="55.8112%" y="303.50">std::f64::&lt;impl f64&gt;..</text></g><g><title>__fma_fma3 (297 samples, 7.54%)</title><rect x="61.3763%" y="277" width="7.5419%" height="15" fill="rgb(217,147,25)" fg:x="2417" fg:w="297"/><text x="61.6263%" y="287.50">__fma_fma3</text></g><g><title>[unknown] (11 samples, 0.28%)</title><rect x="68.6389%" y="261" width="0.2793%" height="15" fill="rgb(247,81,37)" fg:x="2703" fg:w="11"/><text x="68.8889%" y="271.50"></text></g><g><title>[unknown] (11 samples, 0.28%)</title><rect x="68.6389%" y="245" width="0.2793%" height="15" fill="rgb(209,12,38)" fg:x="2703" fg:w="11"/><text x="68.8889%" y="255.50"></text></g><g><title>[unknown] (11 samples, 0.28%)</title><rect x="68.6389%" y="229" width="0.2793%" height="15" fill="rgb(227,1,9)" fg:x="2703" fg:w="11"/><text x="68.8889%" y="239.50"></text></g><g><title>[unknown] (11 samples, 0.28%)</title><rect x="68.6389%" y="213" width="0.2793%" height="15" fill="rgb(248,47,43)" fg:x="2703" fg:w="11"/><text x="68.8889%" y="223.50"></text></g><g><title>[unknown] (11 samples, 0.28%)</title><rect x="68.6389%" y="197" width="0.2793%" height="15" fill="rgb(221,10,30)" fg:x="2703" fg:w="11"/><text x="68.8889%" y="207.50"></text></g><g><title>[unknown] (11 samples, 0.28%)</title><rect x="68.6389%" y="181" width="0.2793%" height="15" fill="rgb(210,229,1)" fg:x="2703" fg:w="11"/><text x="68.8889%" y="191.50"></text></g><g><title>[unknown] (9 samples, 0.23%)</title><rect x="68.6897%" y="165" width="0.2285%" height="15" fill="rgb(222,148,37)" fg:x="2705" fg:w="9"/><text x="68.9397%" y="175.50"></text></g><g><title>[unknown] (9 samples, 0.23%)</title><rect x="68.6897%" y="149" width="0.2285%" height="15" fill="rgb(234,67,33)" fg:x="2705" fg:w="9"/><text x="68.9397%" y="159.50"></text></g><g><title>[unknown] (9 samples, 0.23%)</title><rect x="68.6897%" y="133" width="0.2285%" height="15" fill="rgb(247,98,35)" fg:x="2705" fg:w="9"/><text x="68.9397%" y="143.50"></text></g><g><title>[unknown] (9 samples, 0.23%)</title><rect x="68.6897%" y="117" width="0.2285%" height="15" fill="rgb(247,138,52)" fg:x="2705" fg:w="9"/><text x="68.9397%" y="127.50"></text></g><g><title>[unknown] (9 samples, 0.23%)</title><rect x="68.6897%" y="101" width="0.2285%" height="15" fill="rgb(213,79,30)" fg:x="2705" fg:w="9"/><text x="68.9397%" y="111.50"></text></g><g><title>[unknown] (9 samples, 0.23%)</title><rect x="68.6897%" y="85" width="0.2285%" height="15" fill="rgb(246,177,23)" fg:x="2705" fg:w="9"/><text x="68.9397%" y="95.50"></text></g><g><title>[unknown] (8 samples, 0.20%)</title><rect x="68.7151%" y="69" width="0.2031%" height="15" fill="rgb(230,62,27)" fg:x="2706" fg:w="8"/><text x="68.9651%" y="79.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.25%)</title><rect x="71.2037%" y="293" width="0.2539%" height="15" fill="rgb(216,154,8)" fg:x="2804" fg:w="10"/><text x="71.4537%" y="303.50"></text></g><g><title>vec_array_perf_rust::iir_1024 (122 samples, 3.10%)</title><rect x="68.9182%" y="309" width="3.0980%" height="15" fill="rgb(244,35,45)" fg:x="2714" fg:w="122"/><text x="69.1682%" y="319.50">vec..</text></g><g><title>std::f64::&lt;impl f64&gt;::mul_add (22 samples, 0.56%)</title><rect x="71.4576%" y="293" width="0.5587%" height="15" fill="rgb(251,115,12)" fg:x="2814" fg:w="22"/><text x="71.7076%" y="303.50"></text></g><g><title>__fma_fma3 (8 samples, 0.20%)</title><rect x="71.8131%" y="277" width="0.2031%" height="15" fill="rgb(240,54,50)" fg:x="2828" fg:w="8"/><text x="72.0631%" y="287.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.25%)</title><rect x="74.4033%" y="293" width="0.2539%" height="15" fill="rgb(233,84,52)" fg:x="2930" fg:w="10"/><text x="74.6533%" y="303.50"></text></g><g><title>vec_array_perf_rust::iir_128 (128 samples, 3.25%)</title><rect x="72.0163%" y="309" width="3.2504%" height="15" fill="rgb(207,117,47)" fg:x="2836" fg:w="128"/><text x="72.2663%" y="319.50">vec..</text></g><g><title>std::f64::&lt;impl f64&gt;::mul_add (24 samples, 0.61%)</title><rect x="74.6572%" y="293" width="0.6094%" height="15" fill="rgb(249,43,39)" fg:x="2940" fg:w="24"/><text x="74.9072%" y="303.50"></text></g><g><title>__fma_fma3 (8 samples, 0.20%)</title><rect x="75.0635%" y="277" width="0.2031%" height="15" fill="rgb(209,38,44)" fg:x="2956" fg:w="8"/><text x="75.3135%" y="287.50"></text></g><g><title>vec_array_perf_rust::iir_16 (122 samples, 3.10%)</title><rect x="75.2666%" y="309" width="3.0980%" height="15" fill="rgb(236,212,23)" fg:x="2964" fg:w="122"/><text x="75.5166%" y="319.50">vec..</text></g><g><title>std::f64::&lt;impl f64&gt;::mul_add (22 samples, 0.56%)</title><rect x="77.8060%" y="293" width="0.5587%" height="15" fill="rgb(242,79,21)" fg:x="3064" fg:w="22"/><text x="78.0560%" y="303.50"></text></g><g><title>__fma_fma3 (10 samples, 0.25%)</title><rect x="78.1107%" y="277" width="0.2539%" height="15" fill="rgb(211,96,35)" fg:x="3076" fg:w="10"/><text x="78.3607%" y="287.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.15%)</title><rect x="80.5993%" y="293" width="0.1524%" height="15" fill="rgb(253,215,40)" fg:x="3174" fg:w="6"/><text x="80.8493%" y="303.50"></text></g><g><title>vec_array_perf_rust::iir_2048 (121 samples, 3.07%)</title><rect x="78.3647%" y="309" width="3.0726%" height="15" fill="rgb(211,81,21)" fg:x="3086" fg:w="121"/><text x="78.6147%" y="319.50">vec..</text></g><g><title>std::f64::&lt;impl f64&gt;::mul_add (27 samples, 0.69%)</title><rect x="80.7517%" y="293" width="0.6856%" height="15" fill="rgb(208,190,38)" fg:x="3180" fg:w="27"/><text x="81.0017%" y="303.50"></text></g><g><title>__fma_fma3 (10 samples, 0.25%)</title><rect x="81.1833%" y="277" width="0.2539%" height="15" fill="rgb(235,213,38)" fg:x="3197" fg:w="10"/><text x="81.4333%" y="287.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.10%)</title><rect x="83.8497%" y="293" width="0.1016%" height="15" fill="rgb(237,122,38)" fg:x="3302" fg:w="4"/><text x="84.0997%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.05%)</title><rect x="83.9512%" y="293" width="0.0508%" height="15" fill="rgb(244,218,35)" fg:x="3306" fg:w="2"/><text x="84.2012%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.05%)</title><rect x="83.9512%" y="277" width="0.0508%" height="15" fill="rgb(240,68,47)" fg:x="3306" fg:w="2"/><text x="84.2012%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.05%)</title><rect x="83.9512%" y="261" width="0.0508%" height="15" fill="rgb(210,16,53)" fg:x="3306" fg:w="2"/><text x="84.2012%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.05%)</title><rect x="83.9512%" y="245" width="0.0508%" height="15" fill="rgb(235,124,12)" fg:x="3306" fg:w="2"/><text x="84.2012%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.05%)</title><rect x="83.9512%" y="229" width="0.0508%" height="15" fill="rgb(224,169,11)" fg:x="3306" fg:w="2"/><text x="84.2012%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.05%)</title><rect x="83.9512%" y="213" width="0.0508%" height="15" fill="rgb(250,166,2)" fg:x="3306" fg:w="2"/><text x="84.2012%" y="223.50"></text></g><g><title>[unknown] (2 samples, 0.05%)</title><rect x="83.9512%" y="197" width="0.0508%" height="15" fill="rgb(242,216,29)" fg:x="3306" fg:w="2"/><text x="84.2012%" y="207.50"></text></g><g><title>[unknown] (2 samples, 0.05%)</title><rect x="83.9512%" y="181" width="0.0508%" height="15" fill="rgb(230,116,27)" fg:x="3306" fg:w="2"/><text x="84.2012%" y="191.50"></text></g><g><title>[unknown] (2 samples, 0.05%)</title><rect x="83.9512%" y="165" width="0.0508%" height="15" fill="rgb(228,99,48)" fg:x="3306" fg:w="2"/><text x="84.2012%" y="175.50"></text></g><g><title>[unknown] (2 samples, 0.05%)</title><rect x="83.9512%" y="149" width="0.0508%" height="15" fill="rgb(253,11,6)" fg:x="3306" fg:w="2"/><text x="84.2012%" y="159.50"></text></g><g><title>[unknown] (2 samples, 0.05%)</title><rect x="83.9512%" y="133" width="0.0508%" height="15" fill="rgb(247,143,39)" fg:x="3306" fg:w="2"/><text x="84.2012%" y="143.50"></text></g><g><title>vec_array_perf_rust::iir_256 (127 samples, 3.22%)</title><rect x="81.4373%" y="309" width="3.2250%" height="15" fill="rgb(236,97,10)" fg:x="3207" fg:w="127"/><text x="81.6873%" y="319.50">vec..</text></g><g><title>std::f64::&lt;impl f64&gt;::mul_add (26 samples, 0.66%)</title><rect x="84.0020%" y="293" width="0.6602%" height="15" fill="rgb(233,208,19)" fg:x="3308" fg:w="26"/><text x="84.2520%" y="303.50"></text></g><g><title>__fma_fma3 (8 samples, 0.20%)</title><rect x="84.4591%" y="277" width="0.2031%" height="15" fill="rgb(216,164,2)" fg:x="3326" fg:w="8"/><text x="84.7091%" y="287.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.15%)</title><rect x="86.9985%" y="293" width="0.1524%" height="15" fill="rgb(220,129,5)" fg:x="3426" fg:w="6"/><text x="87.2485%" y="303.50"></text></g><g><title>vec_array_perf_rust::iir_32 (118 samples, 3.00%)</title><rect x="84.6623%" y="309" width="2.9964%" height="15" fill="rgb(242,17,10)" fg:x="3334" fg:w="118"/><text x="84.9123%" y="319.50">vec..</text></g><g><title>std::f64::&lt;impl f64&gt;::mul_add (20 samples, 0.51%)</title><rect x="87.1508%" y="293" width="0.5079%" height="15" fill="rgb(242,107,0)" fg:x="3432" fg:w="20"/><text x="87.4008%" y="303.50"></text></g><g><title>__fma_fma3 (6 samples, 0.15%)</title><rect x="87.5063%" y="277" width="0.1524%" height="15" fill="rgb(251,28,31)" fg:x="3446" fg:w="6"/><text x="87.7563%" y="287.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.23%)</title><rect x="90.0457%" y="293" width="0.2285%" height="15" fill="rgb(233,223,10)" fg:x="3546" fg:w="9"/><text x="90.2957%" y="303.50"></text></g><g><title>vec_array_perf_rust::iir_4096 (125 samples, 3.17%)</title><rect x="87.6587%" y="309" width="3.1742%" height="15" fill="rgb(215,21,27)" fg:x="3452" fg:w="125"/><text x="87.9087%" y="319.50">vec..</text></g><g><title>std::f64::&lt;impl f64&gt;::mul_add (22 samples, 0.56%)</title><rect x="90.2743%" y="293" width="0.5587%" height="15" fill="rgb(232,23,21)" fg:x="3555" fg:w="22"/><text x="90.5243%" y="303.50"></text></g><g><title>__fma_fma3 (5 samples, 0.13%)</title><rect x="90.7059%" y="277" width="0.1270%" height="15" fill="rgb(244,5,23)" fg:x="3572" fg:w="5"/><text x="90.9559%" y="287.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.18%)</title><rect x="93.3977%" y="293" width="0.1778%" height="15" fill="rgb(226,81,46)" fg:x="3678" fg:w="7"/><text x="93.6477%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="93.5754%" y="293" width="0.0254%" height="15" fill="rgb(247,70,30)" fg:x="3685" fg:w="1"/><text x="93.8254%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="93.5754%" y="277" width="0.0254%" height="15" fill="rgb(212,68,19)" fg:x="3685" fg:w="1"/><text x="93.8254%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="93.5754%" y="261" width="0.0254%" height="15" fill="rgb(240,187,13)" fg:x="3685" fg:w="1"/><text x="93.8254%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="93.5754%" y="245" width="0.0254%" height="15" fill="rgb(223,113,26)" fg:x="3685" fg:w="1"/><text x="93.8254%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="93.5754%" y="229" width="0.0254%" height="15" fill="rgb(206,192,2)" fg:x="3685" fg:w="1"/><text x="93.8254%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="93.5754%" y="213" width="0.0254%" height="15" fill="rgb(241,108,4)" fg:x="3685" fg:w="1"/><text x="93.8254%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="93.5754%" y="197" width="0.0254%" height="15" fill="rgb(247,173,49)" fg:x="3685" fg:w="1"/><text x="93.8254%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="93.5754%" y="181" width="0.0254%" height="15" fill="rgb(224,114,35)" fg:x="3685" fg:w="1"/><text x="93.8254%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="93.5754%" y="165" width="0.0254%" height="15" fill="rgb(245,159,27)" fg:x="3685" fg:w="1"/><text x="93.8254%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.03%)</title><rect x="93.5754%" y="149" width="0.0254%" height="15" fill="rgb(245,172,44)" fg:x="3685" fg:w="1"/><text x="93.8254%" y="159.50"></text></g><g><title>vec_array_perf_rust::iir_512 (127 samples, 3.22%)</title><rect x="90.8329%" y="309" width="3.2250%" height="15" fill="rgb(236,23,11)" fg:x="3577" fg:w="127"/><text x="91.0829%" y="319.50">vec..</text></g><g><title>std::f64::&lt;impl f64&gt;::mul_add (18 samples, 0.46%)</title><rect x="93.6008%" y="293" width="0.4571%" height="15" fill="rgb(205,117,38)" fg:x="3686" fg:w="18"/><text x="93.8508%" y="303.50"></text></g><g><title>__fma_fma3 (7 samples, 0.18%)</title><rect x="93.8801%" y="277" width="0.1778%" height="15" fill="rgb(237,72,25)" fg:x="3697" fg:w="7"/><text x="94.1301%" y="287.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.08%)</title><rect x="95.9624%" y="293" width="0.0762%" height="15" fill="rgb(244,70,9)" fg:x="3779" fg:w="3"/><text x="96.2124%" y="303.50"></text></g><g><title>[unknown] (5 samples, 0.13%)</title><rect x="96.0386%" y="293" width="0.1270%" height="15" fill="rgb(217,125,39)" fg:x="3782" fg:w="5"/><text x="96.2886%" y="303.50"></text></g><g><title>[unknown] (5 samples, 0.13%)</title><rect x="96.0386%" y="277" width="0.1270%" height="15" fill="rgb(235,36,10)" fg:x="3782" fg:w="5"/><text x="96.2886%" y="287.50"></text></g><g><title>[unknown] (5 samples, 0.13%)</title><rect x="96.0386%" y="261" width="0.1270%" height="15" fill="rgb(251,123,47)" fg:x="3782" fg:w="5"/><text x="96.2886%" y="271.50"></text></g><g><title>[unknown] (5 samples, 0.13%)</title><rect x="96.0386%" y="245" width="0.1270%" height="15" fill="rgb(221,13,13)" fg:x="3782" fg:w="5"/><text x="96.2886%" y="255.50"></text></g><g><title>[unknown] (5 samples, 0.13%)</title><rect x="96.0386%" y="229" width="0.1270%" height="15" fill="rgb(238,131,9)" fg:x="3782" fg:w="5"/><text x="96.2886%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.13%)</title><rect x="96.0386%" y="213" width="0.1270%" height="15" fill="rgb(211,50,8)" fg:x="3782" fg:w="5"/><text x="96.2886%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.13%)</title><rect x="96.0386%" y="197" width="0.1270%" height="15" fill="rgb(245,182,24)" fg:x="3782" fg:w="5"/><text x="96.2886%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.13%)</title><rect x="96.0386%" y="181" width="0.1270%" height="15" fill="rgb(242,14,37)" fg:x="3782" fg:w="5"/><text x="96.2886%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.13%)</title><rect x="96.0386%" y="165" width="0.1270%" height="15" fill="rgb(246,228,12)" fg:x="3782" fg:w="5"/><text x="96.2886%" y="175.50"></text></g><g><title>[unknown] (4 samples, 0.10%)</title><rect x="96.0640%" y="149" width="0.1016%" height="15" fill="rgb(213,55,15)" fg:x="3783" fg:w="4"/><text x="96.3140%" y="159.50"></text></g><g><title>[unknown] (4 samples, 0.10%)</title><rect x="96.0640%" y="133" width="0.1016%" height="15" fill="rgb(209,9,3)" fg:x="3783" fg:w="4"/><text x="96.3140%" y="143.50"></text></g><g><title>[unknown] (4 samples, 0.10%)</title><rect x="96.0640%" y="117" width="0.1016%" height="15" fill="rgb(230,59,30)" fg:x="3783" fg:w="4"/><text x="96.3140%" y="127.50"></text></g><g><title>[unknown] (4 samples, 0.10%)</title><rect x="96.0640%" y="101" width="0.1016%" height="15" fill="rgb(209,121,21)" fg:x="3783" fg:w="4"/><text x="96.3140%" y="111.50"></text></g><g><title>vec_array_perf_rust::iir_64 (110 samples, 2.79%)</title><rect x="94.0579%" y="309" width="2.7933%" height="15" fill="rgb(220,109,13)" fg:x="3704" fg:w="110"/><text x="94.3079%" y="319.50">ve..</text></g><g><title>std::f64::&lt;impl f64&gt;::mul_add (27 samples, 0.69%)</title><rect x="96.1656%" y="293" width="0.6856%" height="15" fill="rgb(232,18,1)" fg:x="3787" fg:w="27"/><text x="96.4156%" y="303.50"></text></g><g><title>__fma_fma3 (7 samples, 0.18%)</title><rect x="96.6734%" y="277" width="0.1778%" height="15" fill="rgb(215,41,42)" fg:x="3807" fg:w="7"/><text x="96.9234%" y="287.50"></text></g><g><title>all (3,938 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(224,123,36)" fg:x="0" fg:w="3938"/><text x="0.2500%" y="383.50"></text></g><g><title>vec-array-perf- (3,933 samples, 99.87%)</title><rect x="0.1270%" y="357" width="99.8730%" height="15" fill="rgb(240,125,3)" fg:x="5" fg:w="3933"/><text x="0.3770%" y="367.50">vec-array-perf-</text></g><g><title>[unknown] (3,933 samples, 99.87%)</title><rect x="0.1270%" y="341" width="99.8730%" height="15" fill="rgb(205,98,50)" fg:x="5" fg:w="3933"/><text x="0.3770%" y="351.50">[unknown]</text></g><g><title>vec_array_perf_rust::main (3,838 samples, 97.46%)</title><rect x="2.5394%" y="325" width="97.4606%" height="15" fill="rgb(205,185,37)" fg:x="100" fg:w="3838"/><text x="2.7894%" y="335.50">vec_array_perf_rust::main</text></g><g><title>vec_array_perf_rust::iir_8 (124 samples, 3.15%)</title><rect x="96.8512%" y="309" width="3.1488%" height="15" fill="rgb(238,207,15)" fg:x="3814" fg:w="124"/><text x="97.1012%" y="319.50">vec..</text></g><g><title>std::f64::&lt;impl f64&gt;::mul_add (25 samples, 0.63%)</title><rect x="99.3652%" y="293" width="0.6348%" height="15" fill="rgb(213,199,42)" fg:x="3913" fg:w="25"/><text x="99.6152%" y="303.50"></text></g><g><title>__fma_fma3 (13 samples, 0.33%)</title><rect x="99.6699%" y="277" width="0.3301%" height="15" fill="rgb(235,201,11)" fg:x="3925" fg:w="13"/><text x="99.9199%" y="287.50"></text></g></svg></svg>